// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace JobFinder.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20201005163013_1111123")]
    partial class _1111123
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Database.Models.Authorization.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("USER_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnName("USER_CONCURRENCY_STAMP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnName("USER_EMAIL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnName("USER_IS_ACTIVE")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModyficationDate")
                        .HasColumnName("USER_MODIFY_DATE")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .HasColumnName("USER_PW_HASH")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("USER_PHONE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnName("USER_SECURITY_STAMP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnName("USER_USER_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("USER");
                });

            modelBuilder.Entity("Database.Models.Authorization.UserEducation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UED_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("UED_END_DATE")
                        .HasColumnType("datetime2");

                    b.Property<string>("FieldOfStudy")
                        .HasColumnName("UED_FIELD_OF_STUDY")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnName("UED_IS_ACTIVE")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNow")
                        .HasColumnName("UED_IS_NOW")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("UED_START_DATE")
                        .HasColumnType("datetime2");

                    b.Property<string>("StudyLevel")
                        .HasColumnName("UED_STUDY_LEVEL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniversityName")
                        .HasColumnName("UED_UNIVERSITY_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnName("UED_USER_ID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("USER_EDUCATION");
                });

            modelBuilder.Entity("Database.Models.Authorization.UserExperience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UEX_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .HasColumnName("UEX_COMPANY_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnName("UEX_DESCRIPTION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("UEX_END_DATE")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnName("UEX_IS_ACTIVE")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNow")
                        .HasColumnName("UEX_IS_NOW")
                        .HasColumnType("bit");

                    b.Property<string>("PositionName")
                        .HasColumnName("UEX_POSITION_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("UEX_START_DATE")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnName("UEX_USER_ID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("USER_EXPERIENCE");
                });

            modelBuilder.Entity("Database.Models.Authorization.UserPersonalData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UPD_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .HasColumnName("UPD_FIRST_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnName("UPD_LAST_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnName("UPD_USER_ID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("USER_PERSONAL_DATA");
                });

            modelBuilder.Entity("Database.Models.Authorization.UserSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("US_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SkillId")
                        .HasColumnName("US_SKILL_ID")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnName("US_USER_ID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex("UserId");

                    b.ToTable("USER_SKILL");
                });

            modelBuilder.Entity("Database.Models.InitJobOffers.JobCity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("JOBC_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnName("JOBC_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JOB_CITY");
                });

            modelBuilder.Entity("Database.Models.InitJobOffers.JobOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("JOB_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("JobCompany")
                        .HasColumnName("JOB_COMPANY")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobDesc")
                        .HasColumnName("JOB_DESC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobFrom")
                        .HasColumnName("JOB_FROM")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobKey")
                        .HasColumnName("JOB_KEY")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobLocation")
                        .HasColumnName("JOB_LOCATION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobName")
                        .HasColumnName("JOB_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Keys")
                        .HasColumnName("JOB_KEYS")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JOB_OFFER");
                });

            modelBuilder.Entity("Database.Models.InitJobOffers.JobTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("JOBT_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnName("JOBT_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JOB_TITLE");
                });

            modelBuilder.Entity("Database.Models.JobSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("JSL_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Key")
                        .HasColumnName("JSL_KEY")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JOB_SKILL");
                });

            modelBuilder.Entity("Database.Models.Authorization.UserEducation", b =>
                {
                    b.HasOne("Database.Models.Authorization.User", "User")
                        .WithMany("UserEducations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Database.Models.Authorization.UserExperience", b =>
                {
                    b.HasOne("Database.Models.Authorization.User", "User")
                        .WithMany("UserExperiences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Database.Models.Authorization.UserPersonalData", b =>
                {
                    b.HasOne("Database.Models.Authorization.User", "User")
                        .WithOne("PersonalData")
                        .HasForeignKey("Database.Models.Authorization.UserPersonalData", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Database.Models.Authorization.UserSkill", b =>
                {
                    b.HasOne("Database.Models.JobSkill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Models.Authorization.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
